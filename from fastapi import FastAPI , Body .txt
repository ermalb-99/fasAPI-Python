from fastapi import FastAPI , Body , Path , Query,HTTPException
from pydantic import BaseModel,Field as f
from typing import Optional

app = FastAPI()

class Book:
     id:int
     title:str
     author:str 
     description:str
     rating:int
     published:int
     
     def __init__(self,id,title,author,description,rating,published):
          self.id=id
          self.title=title
          self.author=author
          self.description=description
          self.rating=rating
          self.published = published

class BookRequest(BaseModel):
     id : Optional[int] =None 
     title:str = f(min_length=3)
     author:str =  f(min_length=3)
     description : str = f(min_length=10,max_length=100)
     rating:Optional[int] = None
     published:int = f(gt=1800,lt=2030)








BOOKS = [

     Book(id=1,title="Computer Science",author="CodingWithRoby",description="A very nice book",rating=5,published=2020),

     Book(id=2,title="Be Fast With FastAPI",author="CodingWithRoby",description="A very great book",rating=5,published=2020),

     Book(id=3,title="Master endpoint",author="CodingWithRoby",description="A awsome book",rating=2,published=1929),
     
     Book(id=4,title="HP1",author="Author one",description="A very nice book",rating=2,published=1980),

     Book(id=5,title="HP2",author="Author two",description="A very nice book",rating=3,published=2019),

     Book(id=6,title="HP3",author="Author three",description="A very nice book",rating=1,published=2020),
]

# RED ALL BOOKS
@app.get('/books')
async def return_all_books():
     return BOOKS
     

# FETCH A SINGLE BOOK (by {id})
@app.get('/books/{book_id}')
async def read_book(book_id:int= Path(ge=1)):
     for x in BOOKS:
          if book_id == x.id:
               return x
     raise HTTPException(status_code=404,detail="Nuk Egziston Nje Liber Me ID-ne e Dhene")






# upload a book and no need to pass in id it will increment every time we upload a new book
@app.post('/upload')
async def add_new_book(book_request : BookRequest):
     new_book = Book(**book_request.dict())
     BOOKS.append(auto_increment(new_book))
     # raise HTTPException(status_code=422, detail="Te Dhenat Per Uploadimin E Librit Nuk Jane Komplet")

def auto_increment(book=Book):
     if len(BOOKS) > 0:
          book.id = BOOKS[-1].id + 1
     else :
          book.id = 1
     return book




# FETCH A SINGLE BOOK (by {rating})
@app.get('/books/')
async def read_book_by_rating(book_rating:int = Query(gt=0,le=6)):
     books_by_rating = []
     for rate in BOOKS:
          if rate.rating == book_rating:
               books_by_rating.append(rate)
     return books_by_rating



# @app.put('/books/{book_id}')
# async def update_book(book:BookRequest):
#      for x in range(len(BOOKS)):
#           if BOOKS[x].id == book.id:







@app.delete('/books/{book_id}')
async def delete_book(book_id:int=Path(gt=0)):
     for i in range(len(BOOKS)):
          if BOOKS[i].id == book_id:
               BOOKS.pop(i)
               break


@app.get('/books/publish_date/')
async def return_book_by_date_of_publish(date:int=Query(gt=1800,lt=2030)):
     books_returned = []
     for book in BOOKS:
          if book.published == date:
               books_returned.append(book)
     return books_returned
     







